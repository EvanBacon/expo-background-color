{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as SystemUI from 'expo-system-ui';\nimport * as React from 'react';\nimport { Appearance, AppState, AppStateStatus, ColorSchemeName, ColorValue } from 'react-native';\n\ntype ThemedColorValue = { light: ColorValue, dark: ColorValue };\n\ntype Props = { backgroundColor: ColorValue | ThemedColorValue }\n\nconst propsStack: Props[] = [];\n\nconst defaultProps = createStackEntry({\n    backgroundColor: '#fff',\n});\n\n// Timer for updating the native module values at the end of the frame.\nlet updateImmediate: any | null = null;\n\nlet appearanceListener: Appearance.AppearanceListener | null = null;\nlet appStateListener: ((state: AppStateStatus) => void) | null = null;\n\n/**\n * A stack based component for setting the background color of the root view. \n * Useful for changing the background color on certain screens or inside of native modals.\n * Updates based on Appearance and AppState.\n * \n * @example\n * ```tsx\n * function App() {\n *   return (\n *     <>\n *       <RootViewBackgroundColor backgroundColor={{ light: '#fff', dark: '#000' }} />\n *       <RootViewBackgroundColor backgroundColor={'#fff000'} />\n *     </>\n *   )\n * }\n * ```\n */\nexport function RootViewBackgroundColor(props: Props) {\n    let stack = React.useRef<Props | null>(null);\n\n    React.useEffect(() => {\n        // Create a stack entry on component mount\n        stack.current = RootViewBackgroundColor.pushStackEntry(props)\n        return () => {\n            if (stack.current) {\n                // Update on component unmount\n                RootViewBackgroundColor.popStackEntry(stack.current);\n            }\n        }\n    }, [])\n\n    React.useEffect(() => {\n        if (stack.current) {\n            // Update the current stack entry\n            stack.current = RootViewBackgroundColor.replaceStackEntry(\n                stack.current,\n                props,\n            );\n        }\n    }, [props.backgroundColor]);\n\n    return null;\n}\n\nfunction isThemedColor(color?: Props['backgroundColor']): color is ThemedColorValue {\n    return !!color && typeof color !== 'string' && ('light' in color) && ('dark' in color);\n}\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n    propsStack: Array<Props>,\n    defaultValues: Partial<Props>,\n): Partial<Props> {\n    return propsStack.reduce((prev, cur) => {\n        for (const prop in cur) {\n            // @ts-ignore\n            if (cur[prop] != null) {\n                // @ts-ignore\n                prev[prop] = cur[prop];\n            }\n        }\n        return prev;\n    }, Object.assign({}, defaultValues));\n}\n\nfunction setBackgroundColorAsync(scheme: ColorSchemeName, backgroundColor: Props['backgroundColor']) {\n    if (isThemedColor(backgroundColor)) {\n        return SystemUI.setBackgroundColorAsync(scheme === 'dark' ? backgroundColor.dark ?? '#000' : backgroundColor.light ?? '#fff');\n    }\n    return SystemUI.setBackgroundColorAsync(backgroundColor ?? '#fff');\n}\n\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: Props): Props {\n    return {\n        backgroundColor: props.backgroundColor\n    };\n}\n\n/**\n * Set the background color for the app\n * @param color Background color.\n * @param animated Animate the style change.\n */\nRootViewBackgroundColor.setBackgroundColor = (color: ThemedColorValue) => {\n    defaultProps.backgroundColor = color;\n    setBackgroundColorAsync(Appearance.getColorScheme(), color);\n}\n\n/**\n * Push a RootViewBackgroundColor entry onto the stack.\n * The return value should be passed to `popStackEntry` when complete.\n *\n * @param props Object containing the RootViewBackgroundColor props to use in the stack entry.\n */\nRootViewBackgroundColor.pushStackEntry = (props: Props): any => {\n    const entry = createStackEntry(props);\n    propsStack.push(entry);\n\n    // Ensure we only have one appearance change listener.\n    if (!appearanceListener) {\n        appearanceListener = ({ colorScheme }) => {\n            setBackgroundColorAsync(colorScheme, propsStack[propsStack.length - 1].backgroundColor);\n        }\n        Appearance.addChangeListener(appearanceListener);\n    }\n\n    if (!appStateListener) {\n        appStateListener = () => {\n            setBackgroundColorAsync(Appearance.getColorScheme(), propsStack[propsStack.length - 1].backgroundColor);\n        }\n        AppState.addEventListener('change', appStateListener);\n    }\n\n    RootViewBackgroundColor._updatePropsStack();\n    return entry;\n}\n\n/**\n * Pop a RootViewBackgroundColor entry from the stack.\n *\n * @param entry Entry returned from `pushStackEntry`.\n */\nRootViewBackgroundColor.popStackEntry = (entry: Props) => {\n    const index = propsStack.indexOf(entry);\n    if (index !== -1) {\n        propsStack.splice(index, 1);\n    }\n    if (propsStack.length === 0) {\n        if (appearanceListener) {\n            Appearance.removeChangeListener(appearanceListener);\n            appearanceListener = null;\n        }\n        if (appStateListener) {\n            AppState.removeEventListener('change', appStateListener);\n            appStateListener = null;\n        }\n    }\n    RootViewBackgroundColor._updatePropsStack();\n}\n\n/**\n * Replace an existing RootViewBackgroundColor stack entry with new props.\n *\n * @param entry Entry returned from `pushStackEntry` to replace.\n * @param props Object containing the RootViewBackgroundColor props to use in the replacement stack entry.\n */\nRootViewBackgroundColor.replaceStackEntry = (entry: Props, props: Props): any => {\n    const newEntry = createStackEntry(props);\n    const index = propsStack.indexOf(entry);\n    if (index !== -1) {\n        propsStack[index] = newEntry;\n    }\n    RootViewBackgroundColor._updatePropsStack();\n    return newEntry;\n}\n\n/**\n * Updates the native background color with the props from the stack.\n */\nRootViewBackgroundColor._updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(updateImmediate);\n    updateImmediate = setImmediate(() => {\n        const { backgroundColor } = mergePropsStack(\n            propsStack,\n            defaultProps,\n        );\n\n        if (backgroundColor) {\n            setBackgroundColorAsync(Appearance.getColorScheme(), backgroundColor);\n        }\n    });\n};"]}